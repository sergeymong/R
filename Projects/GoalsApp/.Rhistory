habits <- read_sheet(goals_table, "Habits")
write_habits_result(goals_table, calculate_streaks(habits))
# Habits end
# Actual estimate start
tasks <- read_sheet(goals_table, "Tasks")
time <- read_toggle(back_to_week(10, 10))
write_tasks_time(goals_table, calculate_actual_time(tasks, time))
# Actal estimate end
# RUN GOALS END
#
# predictions (unsuccesful)
# forlm <- tasks %>% filter(Status == "Done")
# model <- lm(data = forlm, period_to_seconds(hms(Estimate)) ~ period_to_seconds(hms(forlm$Actual))+`Task priority`)
#
# summary(model)
#
# tasks$prediction_Estimate <- predict(model, newdata = tasks)
#
#
# period_to_seconds(hms(forlm$Actual))
#cronR::cron_add(cronR::cron_rscript('GoalsApp.R'), frequency = 'daily', at = '17:30')
# Ver 1
# подумать о механике, как считать часы и делать предсказания на основе линейной регрессии
require(lubridate)
suppressMessages(require(dplyr))
require(formattable)
require(togglr)
require(googlesheets)
# START MODULE BUDGET & BILLS
### Include export from Toggl ###
read_toggle <- function(period){
set_toggl_api_token("1ade723dc3b40ea9aeafc0c30758d199")
cost <- 750
data <- get_time_entries(since = period[[1]], until = period[[2]])
data <- data[c(1, 4, 5, 6, 11, 15)]
names(data) <- c('Date', 'Duration', 'Project', 'Description', 'Billable', 'Tag')
data$Billable <- ifelse(data$Project == "Работа", 'TRUE', 'FALSE')
data$Date <- as.Date(data$Date)
data$Time <- hms::hms(data$Duration)
data$Duration <- seconds_to_period(data$Duration)
data$Amount <- currency(ifelse(data$Billable == 'TRUE',
hour(data$Duration) * cost +
minute(data$Duration)/60 * cost +
second(data$Duration)/60/60 * cost,
0), 'RUB ')
data <- na.exclude(data)
return(data)
}
back_to_week <- function(which_week=1, weeks=1){
d1 <- which_week * lubridate::days(7)
d2 <- weeks * lubridate::days(7)
from <- Sys.time() - d1
to <- from + d2
return(c(start=from, end=to))
}
how_much <- function(data){
data %>%
group_by(Date, Description) %>%
summarise(Price = round(sum(Amount)), Hours = sum(Time)) %>%
ungroup() %>%
select(Description, Price, Hours) %>%
filter(Price > 0) %>%
janitor::adorn_totals()
}
# module works in Bills and budget.Rmd
# END MODULE BUDGET & BILLS
# START BASE MODULE GOOGLE SHEETS
goals_table <- gs_title("Цели 2019 2.0") # this is first required step -- registering table
names_of_sheets <- gs_ws_ls(goals_table)
read_sheet <- function(reg_table, name){
size <- goals_table$ws[goals_table$ws$ws_title == name, c(4:5)]
table <- reg_table %>% gs_read(ws = name, range = cell_rows(1:size[[1]]))
table
}
# END BASE MODULE GOOGLE SHEETS
# START MODULE HABITS STREAK
calculate_streaks <- function(data){
data <- data[-c(1:7)]
col_limit <- which(as.Date(names(data), tryFormats = "%d/%m/%Y") == (Sys.Date()-1))
for_streaks <- data[1:col_limit]
streaks <- lapply(1:nrow(for_streaks), function(row_x) rbind(rle(for_streaks[row_x, ])$values,
rle(for_streaks[row_x, ])$lengths))
result <- sapply(streaks, function(x)
if (rev(x)[1,1] == 0) {
current = 0
max_st = max(x[2, which(x[1,] == 1)])
strength = current/66
data =c(current, max_st, strength)
} else {
current = rev(x)[2,1]
max_st = max(x[2, which(x[1,] == 1)])
strength = current/66
data = c(current, max_st, strength)
})
rownames(result) <- c("Streak", "Max streak", "Result")
result <- as.data.frame(t(result))
result[[3]] <- formattable::percent(result[[3]])
result <- tidyr::unnest(result)
result <- result[c(2, 3, 1)]
result
}
write_habits_result <- function(reg_table, result){
anchors <- c("C2", "D2", "E2")
for (i in 1:length(anchors)){
reg_table %>% gs_edit_cells(ws = "Habits", anchor = anchors[[i]], input = result[[i]])
Sys.sleep(0.3)
}
cat('Table was updated!')
}
# END MODULE HABITS STREAK
# START MODULE ACTUAL ESTIMATE
calculate_actual_time <- function(tasks, time) {
time <- time %>%
group_by(Description) %>%
summarise(time = sum(Time))
work_table <- left_join(tasks, time, by = c("Full name" = "Description"))
work_table$time <- ifelse(is.na(work_table$time), 0, work_table$time)
work_table$Actual <- ifelse(is.na(work_table$Actual), 0, work_table$Actual)
work_table$Actual <- ifelse(work_table$time > work_table$Actual, work_table$time, work_table$Actual)
work_table$Actual <- hms::hms(work_table$Actual)
return(work_table[['Actual']])
work_table
}
write_tasks_time <- function(reg_table, result){
reg_table %>% gs_edit_cells(ws = "Tasks", anchor = "K2", input = result)
cat('Table was updated!')
}
# RUN GOALS START
# Habits start
habits <- read_sheet(goals_table, "Habits")
write_habits_result(goals_table, calculate_streaks(habits))
# Habits end
# Actual estimate start
tasks <- read_sheet(goals_table, "Tasks")
time <- read_toggle(back_to_week(10, 10))
write_tasks_time(goals_table, calculate_actual_time(tasks, time))
# Actal estimate end
# END MODULE ACTUAL ESTIMATE
# Ver 1
# подумать о механике, как считать часы и делать предсказания на основе линейной регрессии
require(lubridate)
suppressMessages(require(dplyr))
require(formattable)
require(togglr)
require(googlesheets)
# START MODULE BUDGET & BILLS
### Include export from Toggl ###
read_toggle <- function(period){
set_toggl_api_token("1ade723dc3b40ea9aeafc0c30758d199")
cost <- 750
data <- get_time_entries(since = period[[1]], until = period[[2]])
data <- data[c(1, 4, 5, 6, 11, 15)]
names(data) <- c('Date', 'Duration', 'Project', 'Description', 'Billable', 'Tag')
data$Billable <- ifelse(data$Project == "Работа", 'TRUE', 'FALSE')
data$Date <- as.Date(data$Date)
data$Time <- hms::hms(data$Duration)
data$Duration <- seconds_to_period(data$Duration)
data$Amount <- currency(ifelse(data$Billable == 'TRUE',
hour(data$Duration) * cost +
minute(data$Duration)/60 * cost +
second(data$Duration)/60/60 * cost,
0), 'RUB ')
data <- na.exclude(data)
return(data)
}
back_to_week <- function(which_week=1, weeks=1){
d1 <- which_week * lubridate::days(7)
d2 <- weeks * lubridate::days(7)
from <- Sys.time() - d1
to <- from + d2
return(c(start=from, end=to))
}
how_much <- function(data){
data %>%
group_by(Date, Description) %>%
summarise(Price = round(sum(Amount)), Hours = sum(Time)) %>%
ungroup() %>%
select(Description, Price, Hours) %>%
filter(Price > 0) %>%
janitor::adorn_totals()
}
# module works in Bills and budget.Rmd
# END MODULE BUDGET & BILLS
# START BASE MODULE GOOGLE SHEETS
goals_table <- gs_title("Цели 2019 2.0") # this is first required step -- registering table
names_of_sheets <- gs_ws_ls(goals_table)
read_sheet <- function(reg_table, name){
size <- goals_table$ws[goals_table$ws$ws_title == name, c(4:5)]
table <- reg_table %>% gs_read(ws = name, range = cell_rows(1:size[[1]]))
table
}
# END BASE MODULE GOOGLE SHEETS
# START MODULE HABITS STREAK
calculate_streaks <- function(data){
data <- data[-c(1:7)]
col_limit <- which(as.Date(names(data), tryFormats = "%d/%m/%Y") == (Sys.Date()-1))
for_streaks <- data[1:col_limit]
streaks <- lapply(1:nrow(for_streaks), function(row_x) rbind(rle(for_streaks[row_x, ])$values,
rle(for_streaks[row_x, ])$lengths))
result <- sapply(streaks, function(x)
if (rev(x)[1,1] == 0) {
current = 0
max_st = max(x[2, which(x[1,] == 1)])
strength = current/66
data =c(current, max_st, strength)
} else {
current = rev(x)[2,1]
max_st = max(x[2, which(x[1,] == 1)])
strength = current/66
data = c(current, max_st, strength)
})
rownames(result) <- c("Streak", "Max streak", "Result")
result <- as.data.frame(t(result))
result[[3]] <- formattable::percent(result[[3]])
result <- tidyr::unnest(result)
result <- result[c(2, 3, 1)]
result
}
write_habits_result <- function(reg_table, result){
anchors <- c("C2", "D2", "E2")
for (i in 1:length(anchors)){
reg_table %>% gs_edit_cells(ws = "Habits", anchor = anchors[[i]], input = result[[i]])
Sys.sleep(0.3)
}
cat('Table was updated!')
}
# END MODULE HABITS STREAK
# START MODULE ACTUAL ESTIMATE
calculate_actual_time <- function(tasks, time) {
time <- time %>%
group_by(Description) %>%
summarise(time = sum(Time))
work_table <- left_join(tasks, time, by = c("Full name" = "Description"))
work_table$time <- ifelse(is.na(work_table$time), 0, work_table$time)
work_table$Actual <- ifelse(is.na(work_table$Actual), 0, work_table$Actual)
work_table$Actual <- ifelse(work_table$time > work_table$Actual, work_table$time, work_table$Actual)
work_table$Actual <- hms::hms(work_table$Actual)
return(work_table[['Actual']])
work_table
}
write_tasks_time <- function(reg_table, result){
reg_table %>% gs_edit_cells(ws = "Tasks", anchor = "K2", input = result)
cat('Table was updated!')
}
# RUN GOALS START
# Habits start
habits <- read_sheet(goals_table, "Habits")
write_habits_result(goals_table, calculate_streaks(habits))
# Habits end
# Actual estimate start
tasks <- read_sheet(goals_table, "Tasks")
time <- read_toggle(back_to_week(10, 10))
write_tasks_time(goals_table, calculate_actual_time(tasks, time))
# Actal estimate end
# END MODULE ACTUAL ESTIMATE
# Ver 1
# подумать о механике, как считать часы и делать предсказания на основе линейной регрессии
require(lubridate)
suppressMessages(require(dplyr))
require(formattable)
require(togglr)
require(googlesheets)
# START MODULE BUDGET & BILLS
### Include export from Toggl ###
read_toggle <- function(period){
set_toggl_api_token("1ade723dc3b40ea9aeafc0c30758d199")
cost <- 750
data <- get_time_entries(since = period[[1]], until = period[[2]])
data <- data[c(1, 4, 5, 6, 11, 15)]
names(data) <- c('Date', 'Duration', 'Project', 'Description', 'Billable', 'Tag')
data$Billable <- ifelse(data$Project == "Работа", 'TRUE', 'FALSE')
data$Date <- as.Date(data$Date)
data$Time <- hms::hms(data$Duration)
data$Duration <- seconds_to_period(data$Duration)
data$Amount <- currency(ifelse(data$Billable == 'TRUE',
hour(data$Duration) * cost +
minute(data$Duration)/60 * cost +
second(data$Duration)/60/60 * cost,
0), 'RUB ')
data <- na.exclude(data)
return(data)
}
back_to_week <- function(which_week=1, weeks=1){
d1 <- which_week * lubridate::days(7)
d2 <- weeks * lubridate::days(7)
from <- Sys.time() - d1
to <- from + d2
return(c(start=from, end=to))
}
how_much <- function(data){
data %>%
group_by(Date, Description) %>%
summarise(Price = round(sum(Amount)), Hours = sum(Time)) %>%
ungroup() %>%
select(Description, Price, Hours) %>%
filter(Price > 0) %>%
janitor::adorn_totals()
}
# module works in Bills and budget.Rmd
# END MODULE BUDGET & BILLS
# START BASE MODULE GOOGLE SHEETS
goals_table <- gs_title("Цели 2019 2.0") # this is first required step -- registering table
names_of_sheets <- gs_ws_ls(goals_table)
read_sheet <- function(reg_table, name){
size <- goals_table$ws[goals_table$ws$ws_title == name, c(4:5)]
table <- reg_table %>% gs_read(ws = name, range = cell_rows(1:size[[1]]))
table
}
# END BASE MODULE GOOGLE SHEETS
# START MODULE HABITS STREAK
calculate_streaks <- function(data){
data <- data[-c(1:7)]
col_limit <- which(as.Date(names(data), tryFormats = "%d/%m/%Y") == (Sys.Date()-1))
for_streaks <- data[1:col_limit]
streaks <- lapply(1:nrow(for_streaks), function(row_x) rbind(rle(for_streaks[row_x, ])$values,
rle(for_streaks[row_x, ])$lengths))
result <- sapply(streaks, function(x)
if (rev(x)[1,1] == 0) {
current = 0
max_st = max(x[2, which(x[1,] == 1)])
strength = current/66
data =c(current, max_st, strength)
} else {
current = rev(x)[2,1]
max_st = max(x[2, which(x[1,] == 1)])
strength = current/66
data = c(current, max_st, strength)
})
rownames(result) <- c("Streak", "Max streak", "Result")
result <- as.data.frame(t(result))
result[[3]] <- formattable::percent(result[[3]])
result <- tidyr::unnest(result)
result <- result[c(2, 3, 1)]
result
}
write_habits_result <- function(reg_table, result){
anchors <- c("C2", "D2", "E2")
for (i in 1:length(anchors)){
reg_table %>% gs_edit_cells(ws = "Habits", anchor = anchors[[i]], input = result[[i]])
Sys.sleep(0.3)
}
cat('Table was updated!')
}
# END MODULE HABITS STREAK
# START MODULE ACTUAL ESTIMATE
calculate_actual_time <- function(tasks, time) {
time <- time %>%
group_by(Description) %>%
summarise(time = sum(Time))
work_table <- left_join(tasks, time, by = c("Full name" = "Description"))
work_table$time <- ifelse(is.na(work_table$time), 0, work_table$time)
work_table$Actual <- ifelse(is.na(work_table$Actual), 0, work_table$Actual)
work_table$Actual <- ifelse(work_table$time > work_table$Actual, work_table$time, work_table$Actual)
work_table$Actual <- hms::hms(work_table$Actual)
return(work_table[['Actual']])
work_table
}
write_tasks_time <- function(reg_table, result){
reg_table %>% gs_edit_cells(ws = "Tasks", anchor = "K2", input = result)
cat('Table was updated!')
}
# RUN GOALS START
# Habits start
habits <- read_sheet(goals_table, "Habits")
write_habits_result(goals_table, calculate_streaks(habits))
# Habits end
# Actual estimate start
tasks <- read_sheet(goals_table, "Tasks")
time <- read_toggle(back_to_week(10, 10))
write_tasks_time(goals_table, calculate_actual_time(tasks, time))
# Actal estimate end
# END MODULE ACTUAL ESTIMATE
library(lubridate)
library(zoo)
library(xts)
library(dplyr)
library(ggplot2)
library(forecast)
library(quantmod)
library(sophisthse)
#unreal stationary processes
y <- arima.sim(n=100, list(ar=0.7)) #ar process
plot(y)
Acf(y)
Pacf(y)
tsdisplay(y) #all ARMA graphs in one screen
y <- arima.sim(n=100, list(ma=-0.8)) #ma process
tsdisplay(y)
y <- arima.sim(n=100, list(ma=-0.8, ar=-0.5)) #arma process
tsdisplay(y)
y <- arima.sim(n=500, list(order = c(0,1,0))) #random process
tsdisplay(y)
y <- seq(0, 10, length=100) + arima.sim(n=100, list(ar=0.7)) #trend process
tsdisplay(y)
y <- LakeHuron
tsdisplay(y)
mod1 <- Arima(y, order=c(2,0,0)) #2 lags on AR
mod2 <- Arima(y, order=c(1,0,1)) #ARMA 1,1
summary(mod1) #если мы делим коэффициент на стандартную ошибку и число больше 0, то коэффициент значим
summary(mod2)
AIC(mod1)
AIC(mod2) #less is better
mod3 <- Arima(y, order=c(2,0,1))
summary(mod3)
AIC(mod3)
predicti <- forecast(mod2, h=5) #modelling process for 5 years
predicti
mod4 <- Arima(y, order=c(1,1,0)) #non stationary process -- 1 in the middle
AIC(mod4)
predicti2 <- forecast(mod4,h=5)
plot(predicti2)
#choose better model automatically
mod_a <- auto.arima(y)
x <- summary(mod_a)
summary(mod_a)
prognoz_a <- forecast(mod_a, h=5)
prognoz_a
plot(prognoz_a)
#google stocks analysis
Sys.setlocale("LC_TIME", "C")
getSymbols(Symbols = "GOOG", from="2014-01-01", to="2014-12-01" )
head(GOOG)
y <- GOOG$GOOG.Close
tsdisplay(y) #this is random walk
dy <- diff(y) #difference between today and yesterday stock price
tsdisplay(dy)
mod1 <- Arima(y, order=c(0,1,0))
summary(mod1)
predict1 <- forecast(mod1, h=20)
predict1
plot(predict1)
mod_a <- auto.arima(y)
summary(mod_a)
y <- sophisthse("POPNUM_Y")
tsdisplay(y)
mod1 <- Arima(y, order=c(1,1,0), include.drift = T)
summary(mod1)
predict1 <- forecast(mod1, h=5)
plot(predict1)
y <- sophisthse("CPI_M_CHI")
ym <- y[97:nrow(y),]
tsdisplay(ym) #this is seasoned data
mod1 <- Arima(ym, order=c(1,0,0), seasonal = list(order=c(1,0,0),period=12))  #1 in seasonal like a 12 month ago, this is year
summary(mod1)
AIC(mod1)
predict1 <- forecast(mod1, h=12)
plot(predict1) #forecast with seasons, not just linear
moda <- auto.arima(ym)
predicta <- forecast(mod1, h=12)
plot(predicta) #forecast with seasons, not just linear
#homework
y <- arima.sim(n=500, list(order = c(1,1,1)))
tsdisplay(y)
set.seed(30)
y <- arima.sim(n=100, list(ar=0.7))
tsdisplay(y)
set.seed(2)
y <- arima.sim(n=100, list(ar=0.99))
tsdisplay(y)
trend <- c(1:100)
tsdisplay(trend)
plot(forecast(Arima(y, seasonal = c(1,0,0)), h=100))
mod1 <- lm(y ~ trend + I(trend^2) + I(trend^3))
summary(mod1)
set.seed(1)
y <- arima.sim(n=100, list(ar=0.5))
d <- Arima(y, order=c(0,0,4))
(1-pnorm(abs(d$coef)/sqrt(diag(d$var.coef))))*2 #check p-value
ym <- hhi_q_i[1:89,1]
tsdisplay(ym)
Arima(ym, order = c(1,1,0))
Arima(ym, order = c(2,1,0))
Arima(ym, order = c(3,1,0))
Arima(ym, order = c(1,1,1))
ym <- hhi_q_i[30:61,1]
ym
ar <- auto.arima(ym)
AIC(ar)
ym <- hhi_q_i[1:89,1]
model <- Arima(ym, order=c(2,1,0))
forecast(model, h=3)
library(hydroGOF)
ym <- hhi_q_i[1:86,1]
model <- Arima(ym, order=c(2,1,2))
model <- Arima(ym, order=c(0,1,0))
model <- Arima(ym, order=c(1,1,2))
model <- Arima(ym, order=c(1,1,3))
fc <- forecast(model, h=3)
mse(sim = as.numeric(fc$mean), obs = as.numeric(hhi_q_i[87:89,1]))
ym <- hhi_q_i[1:89,1]
model <- Arima(ym, order=c(1,1,0), seasonal = c(0,0,1))
model
ym <- hhi_q_i[1:89,]
ym$crysis <- rep(0, 89)
ym[grep("2008...|2009...", time(ym)),4] <- 1
Arima(ym[,1], order=c(2,1,1), xreg = ym[,4])
set.seed(70)
y1 <- arima.sim(n=100, list(ar=0.7))
plot(y1,type="l",axes=T, ylab = "variable Y")
rect(20,-1000,25,1000,col="#FFCCEE",border="#FFCCEE")
rect(70,-1000,80,1000,col="#FFCCEE",border="#FFCCEE")
par(new=TRUE)
plot(y1,type="l",ylab="")
AIC(mod4)
mod4 <- Arima(y, order=c(1,1,0)) #non stationary process -- 1 in the middle
predicti <- forecast(mod2, h=5) #modelling process for 5 years
mod3 <- Arima(y, order=c(2,0,1))
summary(mod3)
plot(predicti2)
prognoz_a <- forecast(mod_a, h=5)
prognoz_a
plot(prognoz_a)
