}
meanP <- apply(avian3[, colsP], 2, mean)
meanP <- round(sort(meanP, decreasing = T), digits = 2)
meanP
}
diff_between_df <- function(df1, df2, type = "P", mean = "max"){
if (names(df1) == names(df2) {
cols <- names(df1)[grepl(type, names(avian))]
} else {
print("Columns should be equals")
stop(diff_between_df)
}
}
meanP <- apply(avian3[, colsP], 2, mean)
meanP <- round(sort(meanP, decreasing = T), digits = 2)
meanP
}
diff_between_df <- function(df1, df2, type = "P", mean = "max"){
if (names(df1) == names(df2)) {
cols <- names(df1)[grepl(type, names(avian))]
} else {
print("Columns should be equals")
stop(diff_between_df)
}
}
diff_between_df <- function(df1, df2, type = "P", mean = "max"){
if (names(df1) == names(df2)) {
cols <- names(df1)[grepl(type, names(df1))]
} else {
print("Columns should be equals")
stop(diff_between_df)
}
}
diff_between_df <- function(df1, df2, type = "P", m = "max"){
if (names(df1) == names(df2)) {
cols <- names(df1)[grepl(type, names(df1))]
} else {
print("Columns should be equals")
stop(diff_between_df)
}
need1 <- apply(df1[, cols], 2, m)
need1 <- round(sort(need1, decreasing = T), digits = 2)
need2 <- apply(df2[, cols], 2, m)
need2 <- round(sort(need2, decreasing = T), digits = 2)
need3 <- abs(need1 - need2)
need3
}
diff_between_df(avian, avian3)
diff_between_df <- function(df1, df2, type = "P", m = "max"){
if (c(names(df1)) == c(names(df2))) {
cols <- names(df1)[grepl(type, names(df1))]
} else {
print("Columns should be equals")
stop(diff_between_df)
}
need1 <- apply(df1[, cols], 2, m)
need1 <- round(sort(need1, decreasing = T), digits = 2)
need2 <- apply(df2[, cols], 2, m)
need2 <- round(sort(need2, decreasing = T), digits = 2)
need3 <- abs(need1 - need2)
need3
}
diff_between_df(avian, avian3)
diff_between_df <- function(df1, df2, type = "P", m = "max"){
if (names(df1) == names(df2)) {
cols <- names(df1)[grepl(type, names(df1))]
} else {
print("Columns should be equals")
stop(diff_between_df)
}
need1 <- apply(df1[, cols], 2, m)
need1 <- round(sort(need1, decreasing = T), digits = 2)
need2 <- apply(df2[, cols], 2, m)
need2 <- round(sort(need2, decreasing = T), digits = 2)
need3 <- abs(need1 - need2)
need3
}
diff_between_df(avian, avian3)
diff_between_df(avian, avian3,type = "Ht")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
if (names(df1) == names(df2)) {
cols <- names(df1)[grepl(type, names(df1))]
} else {
print("Columns should be equals")
stop(diff_between_df)
}
need1 <- apply(df1[, cols], 2, m)
need1
need1 <- round(sort(need1, decreasing = T), digits = 2)
need2 <- apply(df2[, cols], 2, m)
need2 <- round(sort(need2, decreasing = T), digits = 2)
need3 <- abs(need1 - need2)
need3
}
diff_between_df(avian, avian3,type = "Ht")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
if (names(df1) == names(df2)) {
cols <- names(df1)[grepl(type, names(df1))]
} else {
print("Columns should be equals")
stop(diff_between_df)
}
need1 <- apply(df1[, cols], 2, m)
print(need1)
need1 <- round(sort(need1, decreasing = T), digits = 2)
need2 <- apply(df2[, cols], 2, m)
need2 <- round(sort(need2, decreasing = T), digits = 2)
need3 <- abs(need1 - need2)
need3
}
diff_between_df(avian, avian3,type = "Ht")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
if (names(df1) == names(df2)) {
cols <- names(df1)[grepl(type, names(df1))]
} else {
print("Columns should be equals")
stop(diff_between_df)
}
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- abs(need1 - need2)
need3
}
diff_between_df(avian, avian3,type = "Ht")
diff_between_df(avian, avian3,type = "Ht")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
print(names(df1))
if (names(df1) == names(df2)) {
cols <- names(df1)[grepl(type, names(df1))]
} else {
print("Columns should be equals")
stop(diff_between_df)
}
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- abs(need1 - need2)
need3
}
diff_between_df(avian, avian3,type = "Ht")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- abs(need1 - need2)
need3
}
diff_between_df(avian, avian3,type = "Ht")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- (need1 - need2)
need3
}
diff_between_df(avian, avian3,type = "Ht")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
print(need1, need2)
need3 <- (need1 - need2)
need3
}
diff_between_df(avian, avian3,type = "Ht")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
print(need1)
print(need2)
need3 <- (need1 - need2)
need3
}
diff_between_df(avian, avian3,type = "Ht")
avian <- read.csv("~/Downloads/Work/Personal/Programming/avianHabitat.csv")
coverage_vars <- names(avian)[-(1:4)][c(T,F)]
avian$total_coverage <- rowSums(avian[, coverage_vars])
avian2 <- read.csv2("~/Downloads/Work/Personal/Programming/avianHabitat2.csv", skip = 5, header = T, comment.char = "%", na.strings = "Don't remember", sep = ";")
# avian2$VOR <- as.numeric(as.character(avian2$VOR))
# avian2$DBHt <- as.numeric(as.character(avian2$DBHt))
# avian2$WHt <- as.numeric(as.character(avian2$WHt))
# avian2$EHt <- as.numeric(as.character(avian2$EHt))
# avian2$HHt <- as.numeric(as.character(avian2$HHt))
# avian2$LHt <- as.numeric(as.character(avian2$LHt))
avian2 <- add_column(avian2, Observer = "KT", .after = avian2$Site)
coverage_vars2 <- names(avian2)[-(1:4)][c(T,F)]
avian2$total_coverage <- rowSums(avian2[, coverage_vars])
avian3 <- rbind(avian, avian2)
avian3$average_coverage <- rowMeans(avian3[, coverage_vars])
avian2 <- read.csv2("~/Downloads/Work/Personal/Programming/avianHabitat2.csv", skip = 5, header = T, comment.char = "%", na.strings = "Don't remember", sep = ";")
avian2$VOR <- as.numeric(as.character(avian2$VOR))
avian2$DBHt <- as.numeric(as.character(avian2$DBHt))
avian2$WHt <- as.numeric(as.character(avian2$WHt))
avian2$EHt <- as.numeric(as.character(avian2$EHt))
avian2$HHt <- as.numeric(as.character(avian2$HHt))
avian2$LHt <- as.numeric(as.character(avian2$LHt))
avian2 <- add_column(avian2, Observer = "KT", .after = avian2$Site)
coverage_vars2 <- names(avian2)[-(1:4)][c(T,F)]
avian2$total_coverage <- rowSums(avian2[, coverage_vars])
avian3 <- rbind(avian, avian2)
avian2 <- read.csv2("~/Downloads/Work/Personal/Programming/avianHabitat2.csv", skip = 5, header = T, comment.char = "%", na.strings = "Don't remember", sep = ";")
avian2$VOR <- as.numeric(as.character(avian2$VOR))
avian2$DBHt <- as.numeric(as.character(avian2$DBHt))
avian2$WHt <- as.numeric(as.character(avian2$WHt))
avian2$EHt <- as.numeric(as.character(avian2$EHt))
avian2$HHt <- as.numeric(as.character(avian2$HHt))
avian2$LHt <- as.numeric(as.character(avian2$LHt))
avian2 <- add_column(avian2, Observer = "KT", .after = avian2$Site)
coverage_vars2 <- names(avian2)[-(1:4)][c(T,F)]
avian2$total_coverage <- rowSums(avian2[, coverage_vars])
avian3 <- rbind(avian, avian2)
diff_between_df(avian, avian3,type = "Ht")
diff_between_df(avian, avian3,type = "Ht", m = "mean")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
print(need1)
print(need2)
need3 <- round(abs(need1 - need2), digits = 4)
need3
}
diff_between_df(avian, avian3,type = "Ht", m = "mean")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
need3
}
diff_between_df(avian, avian3,type = "Ht", m = "mean")
diff_between_df(avian, avian3,type = "P", m = "mean")
diff_between_df(avian, avian2,type = "P", m = "mean")
diff_between_df(avian, avian2, type = "P", m = "max")
diff_between_df(avian, avian2, type = "P", m = "max")
diff_between_df(avian, avian3, type = "P", m = "max")
diff_between_df(avian2, avian3, type = "P", m = "max")
diff_between_df(avian, avian2, type = "P", m = "mean")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
print(m, "different is", need3)
need3
}
diff_between_df(avian, avian2, type = "P", m = "mean")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
need3
print(m, "different is", need3)
}
diff_between_df(avian, avian2, type = "P", m = "mean")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
need3
print(m, need3)
}
diff_between_df(avian, avian2, type = "P", m = "mean")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
need3
print(m)
print("different is")
print(need3)
}
diff_between_df(avian, avian2, type = "P", m = "mean")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
print(paste(m," different is ", need3))
need3
}
diff_between_df(avian, avian2, type = "P", m = "mean")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
print(paste(m," different is "))
need3
}
diff_between_df(avian, avian2, type = "P", m = "mean")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
print(paste(m," different for ", type, " is"))
need3
}
diff_between_df(avian, avian2, type = "P", m = "mean")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
print(paste(m,"different for", type, "is"))
need3
}
diff_between_df(avian, avian2, type = "P", m = "mean")
diff_between_df(avian, avian2, type = "Ht", m = "mean")
diff_between_df(avian, avian2, type = "Ht", m = "max")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
print(paste(m,"different between", df1, df2, "for", type, "is"))
need3
}
diff_between_df(avian, avian2, type = "Ht", m = "max")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
print(paste(m,"different between", name(df1), name(df2), "for", type, "is"))
need3
}
diff_between_df(avian, avian2, type = "Ht", m = "max")
diff_between_df <- function(df1, df2, type = "P", m = "max"){
cols <- names(df1)[grepl(type, names(df1))]
need1 <- apply(df1[, cols], 2, m)
need1 <- sort(need1, decreasing = T)
need2 <- apply(df2[, cols], 2, m)
need2 <- sort(need2, decreasing = T)
need3 <- round(abs(need1 - need2), digits = 4)
print(paste(m,"different", "for", type, "is"))
need3
}
diff_between_df(avian, avian2, type = "Ht", m = "max")
rm(list = ls())
paste(c("углекислый", "веселящий"), "газ")
paste(c("углекислый", "веселящий"), "газ")
options(encoding="UTF-8")
paste(c("углекислый", "веселящий"), "газ")
options(encoding="KOI8-R")
paste(c("углекислый", "веселящий"), "газ")
Sys.setlocale(locale = "Russian")
Sys.setlocale("LC_CTYPE", "russian")
Sys.setlocale("LC_CTYPE", "Russian")
Sys.setlocale("LC_CTYPE", "en_RU.UTF-8")
Sys.setlocale("LC_CTYPE", "en_RU.UTF-8")
Sys.setlocale(locale = "Russian")
paste(c("углекислый", "веселящий"), "газ")
encoding(paste(c("углекислый", "веселящий"), "газ"))
Encoding(paste(c("углекислый", "веселящий"), "газ"))
Sys.getlocale()
Sys.getlocale()
Sys.setlocale(locale = "Russian")
Encoding(paste(c("углекислый", "веселящий"), "газ"))
paste(c("углекислый", "веселящий"), "газ")
paste0(c("углекислый", "веселящий"), "газ")
Sys.getlocale()
paste0(c("углекислый", "веселящий"), "газ")
paste0(c("углекислый ", "веселящий "), "газ")
paste(c("углекислый", "веселящий"), "газ")
paste(c("углекислый", "веселящий"), "газ", sep = "_")
paste(c("углекислый", "веселящий"), "газ", sep = "_", collapse = "а также")
paste(c("углекислый", "веселящий"), "газ", sep = "_", collapse = ", а также")
paste(c("углекислый", "веселящий"), "газ", sep = "_", collapse = ", а также ")
s <- c("Без труда не вытащишь и рыбку из пруда",
"Терпение и труд всё перетрут",
"Кончил дело -- гуляй смело",
"Работа не волк, в лес не убежит")
strsplit(s, " и ", fixed = T)
strsplit(s, "[[:punct:]]")
grep("труд", s)
gsub("\\b[[:alpha:]][4,5]\\b", "####", s)
gsub("\\b[[:alpha:]][4,5]\\b", "####", s)
gsub("\\b[[:alpha:]]{4,5}\\b", "####", s)
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
str_extract(s, "н.")
str_replace(s, "[иа]", "?")
str_extract_all(s, "н.")
tolower(month.name)
tolower(month.abb)
tolower(month.Abb)
tolower(month.abb)
length("Аэрофотосъёмка ландшафта уже выявила земли богачей и процветающих крестьян.")
lengths("Аэрофотосъёмка ландшафта уже выявила земли богачей и процветающих крестьян.")
nchar("Аэрофотосъёмка ландшафта уже выявила земли богачей и процветающих крестьян.")
nchar(NA)
getwd()
head(list.files9)
head(list.files())
list.dirs("..", recursive = F)
bind_diag <- function(m1, m2, fill) {
m3 <- matrix(fill,
nrow = nrow(m1) + nrow(m2),
ncol = ncol(m1) + ncol(m2))
m3[1:nrow(m1), 1:ncol(m1)] <- m1
m3[nrow(m1) + 1:nrow(m2), ncol(m1) + 1:ncol(m2)] <- m2
m3
}
m1 <- matrix(1:12, nrow = 3)
m1
library(vcd)
library(ggplot2)
titanic <- read.csv("https://stepic.org/media/attachments/course/524/train.csv")
titanic <- na.omit(titanic)
titanic <- mutate(titanic,
Survived = factor(Survived, labels = c("No", "Yes")),
Pclass = factor(Pclass, labels = c("First", "Second", "Third")),
Sex = factor(Sex, labels = c("Female", "Male")))
simple_fit <- glm(Survived ~ 1, titanic, family = "binomial")
summary(sample_fit)
summary(sample_fit)
coef(simple_fit)
table(titanic$Survived)
summary(simple_fit)
#модели с двумя номинативными предикторами
fit2 <- glm(Survived ~ Sex * Pclass, titanic, family = "binomial")
summary(fit2)
coef(fit2)
chance_from_log(coef(fit2))
coef(fit2)
summary(fit2)
df <- data.frame(swiss)
fit <- lm(Fertility ~ Examination + Catholic, swiss)
summary(fit)
summary(lm(wt ~ mpg + disp + hp, df))
#домашнее задание 2
df <- mtcars[,c(6, 1, 3, 5, 4)]
summary(lm(wt ~ mpg + disp + hp, df))
View(mtcars)
summary(lm(mpg ~ wt + as.factor(gear) + hp, df))
summary(lm(mpg ~ wt + hp, df))
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point()+
geom_smooth(method = 'lm')
habits <- read_sheet(goals_table, "Habits")
write_habits_result(goals_table, calculate_streaks(habits))
install.packages("swirl")
library(swirl)
swirl()
A <- matrix(0, nrow=4, ncol=5)
A
A <- matrix(1, nrow=3, ncol=4)
B <- matrx(1, nrow=3, ncol=6)
B <- matrix(1, nrow=3, ncol=6)
A
b
B
A * B
T(A)
t(A)
t(A) * B
t(A)
t(A) * B
t(A) %*% B
A %*% B
A <- c(2, 4, 6)
B <- c(3, 0, 0)
A %*% B
A <- matrix(c(2, 4, 6, 10, 12, 14, 18, 20, 22, 8, 16, 24), ncol = 3, nrow = 4)
A
A <- matrix(c(2, 4, 6, 10, 12, 14, 18, 20, 22, 8, 16, 24), ncol = 3, nrow = 4, byrow = T)
A
A %*% B
B <- matrix(c(3, 0, 0, 0, 3, 0, 0, 0, 3), ncol=3, byrow = T)
B
A %*% B
setwd("~/Downloads/Work/Personal/Programming/R/Projects/GoalsApp")
